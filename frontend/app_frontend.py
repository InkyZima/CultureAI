"""
This is the app frontend.
Responsibilities: Display information to the user. Allow the user to change settings and parameters.
The frontend is not responsible for any business logic or any reformatting of data other than for the purpose of diplaying it.
The frontend also does not enrich data received from the user. It just passes whatever the user passes.

# User experience logic:

Come to page first time OR for the first time this day:
Get a static greeting,
converse.

Come to page (refresh) later same day:
if last_user_message < 1 hour: 
    user just sees the chat_history
if last_user_message >= 1 hour: 
    user sees chat_history + welcome_back_message generated by llm (with inputs chat_history and injected system instruction "The user was away for a while and has now come back. Welcome them back.")
    OR
    handle it via async proactive messenger
converse.


"""

# streamlit run frontend_app.py

import streamlit as st
import streamlit.components.v1 as components
import requests  # To make HTTP requests to backend
from frontend_helpers import *

BACKEND_URL = "http://127.0.0.1:5000/"  # URL of your Flask backend

# --- Configure sidebar to be collapsed by default ---
st.set_page_config(initial_sidebar_state="collapsed")

st.title("CultureAI")


# load chat logic

first_time_here = chat_history_is_empty()
st.session_state.chat_history = []

if first_time_here:
    print("First time here.")
    display_introduction_static()
else:
    print("NOT first time here.")
    display_chat_history()
    if last_user_message_when() and last_user_message_when() >= 60: # user was away over one hour
        display_welcome_back()

user_message = st.chat_input("Say something")
if user_message:
    with st.chat_message("user"):
        st.markdown(user_message)

    # Send user message to backend API
    try:
        backend_response = requests.post(f"{BACKEND_URL}/chat", json={"message": user_message})
        backend_response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        llm_response_data = backend_response.json()
        llm_response = llm_response_data.get('response', "Error: No response from backend")

        with st.chat_message("assistant"):
            st.markdown(llm_response)
        st.session_state.chat_history.append({"user_message": user_message, "llm_response": llm_response})

    except requests.exceptions.RequestException as e:
        st.error(f"Error communicating with backend: {e}")
        llm_response = "Error communicating with backend."


with st.sidebar:
    st.header("Settings")
    st.write("Settings content managed by backend API...")
    # You can add settings widgets here in the sidebar later
    if st.button("Reset conversation"):
        try:
            reset_response = requests.get(f"{BACKEND_URL}/reset_conversation")
            reset_response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
            st.session_state.chat_history = []
            st.rerun()
        except requests.exceptions.RequestException as e:
            st.error(f"Error resetting conversation: {e}")
    if st.button("Notification Test"):
        try:
            msg = st.toast('Gathering ingredients...')
            reset_response = requests.get(f"{BACKEND_URL}/notification_test")
            reset_response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        except requests.exceptions.RequestException as e:
            st.error(f"Error resetting conversation: {e}")

components.html(
    """
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script type="text/javascript">
        const socket = io(`http://localhost:5000`); // Explicitly set backend address

        socket.on('connect', function() {
            console.log('Connected to WebSocket server');
        });

        socket.on('disconnect', function() {
            console.log('Disconnected from WebSocket server');
        });

        socket.on('message_from_backend', function(message) {
            console.log('Received message:', message);
            // You can add code here to send the message back to Streamlit if needed
            // For now, it's just logging to the console as per your initial request
        });

        socket.on('new_assistant_message', function(message) {
            console.log('Received message:', message);
            st.markdown(message)

            // You can add code here to send the message back to Streamlit if needed
            // For now, it's just logging to the console as per your initial request
        });
    </script>
    """,
    height=0,  # Set height to 0 to make the component invisible if you only need the script to run
    width=0
)